id: data_cleaning
namespace: corn_mlops_flow

inputs:
  - id: model_performance_threshold
    type: FLOAT
    defaults: 0.7
  - id: target_stage
    type: STRING
    defaults: Production
  - id: force_deployment
    type: BOOLEAN
    defaults: false
  - id: model_selection
    type: SELECT
    displayName: "Select the model you are interested:"
    defaults: linear
    values:
      - linear
      - ridge
      - lasso

variables:
  mlflow_tracking_uri: "https://mlflow-server-453290981886.us-central1.run.app"
  gcp_project: "corn-yield-prediction-kenia"
  experiment_name: "corn-yield-prediction"
  model_name: "corn-yield-predictor"

tasks:
  - id: download_dataset
    type: io.kestra.plugin.scripts.python.Script
    description: Download corn farming dataset from Kaggle using authenticated API
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    beforeCommands:
    - pip install kagglehub
    - pip install kaggle 
    outputFiles:
      - "corn_data.csv"
    script: |
      import kaggle
      kaggle.api.authenticate()
      handle = "japondo/corn-farming-data"
      print("Los archivos a descargar son: ", kaggle.api.dataset_list_files(handle).files)
      kaggle.api.dataset_download_files(handle, path=".", unzip=True)

  - id: clean_split
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Clean the dataset and preparing for training stage
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - clean.py
    beforeCommands:
      - pip install pandas scikit-learn 
    inputFiles:
      corn.csv: "{{ outputs.download_dataset.outputFiles['corn_data.csv'] }}"
    commands:
      - python clean.py
    outputFiles:
      - "data_splits/*.csv"
      - "vectorizer.pkl"

  - id: train_linear_model
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Training the linear model 
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - train_linear.py
    env:
      # MLflow configuration - using your Cloud Run URL
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri }}"
      # Optional: Set experiment name
      MLFLOW_EXPERIMENT_NAME: "{{ vars.experiment_name }}"
      MODEL_NAME: "{{ vars.model_name}}"
      MODEL_TYPE: "{{ inputs.model_selection}}"
    beforeCommands:
      - pip install pandas numpy scikit-learn mlflow==3.1.4 google-cloud-storage
    inputFiles:
      X_train.csv: "{{ outputs.clean_split.outputFiles['data_splits/X_train.csv'] }}"
      y_train.csv: "{{ outputs.clean_split.outputFiles['data_splits/y_train.csv'] }}"
      X_val.csv: "{{ outputs.clean_split.outputFiles['data_splits/X_val.csv'] }}"
      y_val.csv: "{{ outputs.clean_split.outputFiles['data_splits/y_val.csv'] }}"
      dict_vectorizer: "{{ outputs.clean_split.outputFiles['vectorizer.pkl'] }}"
    commands:
      - python train_linear.py
    outputFiles:
      - "model_artifacts/**"
      - "*.pkl"
      - "*.json"
  
  - id: model_registry_management
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Manage model versions and transitions in MLflow registry
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - model_registry.py
    env:
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri }}"
      MODEL_NAME: "{{ vars.model_name}}"
    beforeCommands:
      - pip install mlflow google-cloud-storage pandas
    inputFiles:
      run_info.json: "{{ outputs.train_linear_model.outputFiles['model_artifacts/run_info.json'] }}"
    commands:
      - python model_registry.py
    outputFiles:
      - "*.json"
  
  - id: fetch_production_model
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Fetch the latest production model from MLflow and evaluate performance
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - model_fetch.py
    beforeCommands:
      - pip install mlflow pandas numpy scikit-learn
    env:
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri}}"
      MODEL_NAME: "{{ vars.model_name}}"
      TARGET_STAGE: "{{ inputs.target_stage}}"
      THRESHOLD: "{{ inputs.model_performance_threshold }}"
      FORCE_DEPLOYMENT: "{{ inputs.force_deployment}}"
    commands:
      - python model_fetch.py
    outputFiles:
      - "model.bin"
      - "model_metadata.json"
      - "deployment_decision.json"
  
  - id: debug_deployment_value
    type: io.kestra.plugin.core.log.Log
    message: "Raw value: '{{ (read(outputs.fetch_production_model.outputFiles['deployment_decision.json']) | jq('.should_deploy')) + '' }}'"

  - id: debug_deployment_type
    type: io.kestra.plugin.core.log.Log
    message: "JQ output: {{ read(outputs.fetch_production_model.outputFiles['deployment_decision.json']) | jq('.should_deploy') }}"
  
  - id: debug_json_structure
    type: io.kestra.plugin.core.log.Log
    message: "Full JSON content: {{ read(outputs.fetch_production_model.outputFiles['deployment_decision.json']) }}"

  - id: deployment_decision_gate
    type: io.kestra.plugin.core.flow.If
    condition: "{{ read(outputs.fetch_production_model.outputFiles['deployment_decision.json']) | jq('.should_deploy') }}"
    # value: >
    #   {{ read(outputs.fetch_production_model.outputFiles['deployment_decision.json']) | jq('.should_deploy') | first }}
    then:
      - id: build_docker_image
        type: io.kestra.plugin.scripts.shell.Commands
        description: Build Docker image for the model service
        inputFiles:
          model.bin: "{{ outputs.fetch_production_model.outputFiles['model.bin'] }}"
          model_metadata.json: "{{ outputs.fetch_production_model.outputFiles['model_metadata.json'] }}"
        commands:
        - |
          # Create app directory
          mkdir -p app
          
          # Move model files to app directory
          mv model.bin app/
          mv model_metadata.json app/
          
          # Create requirements.txt
          cat > app/requirements.txt << EOF
          flask==2.3.3
          pandas==2.0.3
          numpy==1.24.3
          scikit-learn
          waitress==2.0.0
          google-cloud-logging==3.8.0
          EOF

          # Create main.py (Flask app)
          cat > app/main.py << 'EOF'
          import os
          import json
          import logging
          import pickle
          from flask import Flask, request, jsonify
          import pandas as pd
          import numpy as np

          # The model used is referred
          model_file = 'model.bin'

          # Setup logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # Load model and metadata at startup
          try:
              with open(model_file, 'rb') as f_in:
                  dv, model = pickle.load(f_in)
                  
              with open('model_metadata.json', 'r') as f:
                  metadata = json.load(f)
                  
              logger.info(f"Model loaded: {metadata['model_name']} v{metadata['model_version']}")
          except Exception as e:
              logger.error(f"Failed to load model: {e}")
              raise

          # Instantiating the app
          app = Flask('yield')

          @app.route('/predict', methods=['POST'])
          # Function that calculates the target variable:
          def predict():
              farmer = request.get_json()
              X = dv.transform([farmer])
              y_pred = model.predict(X)[0]
              result = {
                  'Yield prediction': y_pred,
              }
              return jsonify(result)

          if __name__ == "__main__":
              app.run(debug=True, host='0.0.0.0', port=9696)
          EOF

          # Create Dockerfile
          cat > Dockerfile << EOF
          FROM python:3.9-slim

          WORKDIR /app
          
          # Copy requirements and install dependencies
          COPY app/requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          # Copy application files
          COPY app/ .
          
          # Expose the application port
          EXPOSE 9696

          # Set the default command to run the application
          CMD ["waitress-serve", "--listen=0.0.0.0:9696", "main:app"]
          EOF
          
          echo "Docker files created successfully"
        
        outputFiles:
          - "Dockerfile"
          - "app/**"
      
    else:
    - id: skip_deployment
      type: io.kestra.plugin.core.log.Log
      message: "Deployment skipped - should_deploy is false"