id: data_cleaning
namespace: corn_mlops_flow

inputs:
  - id: model_performance_threshold
    type: FLOAT
    defaults: 0.7
  - id: target_stage
    type: STRING
    defaults: Production
  - id: force_deployment
    type: BOOLEAN
    defaults: false

variables:
  mlflow_tracking_uri: "https://mlflow-server-453290981886.us-central1.run.app"
  gcp_project: "corn-yield-prediction-kenia"
  experiment_name: "corn-yield-prediction"
  model_name: "corn-yield-predictor"

tasks:
  - id: download_dataset
    type: io.kestra.plugin.scripts.python.Script
    description: Download corn farming dataset from Kaggle using authenticated API
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    beforeCommands:
    - pip install kagglehub
    - pip install kaggle 
    outputFiles:
      - "corn_data.csv"
    script: |
      import kaggle
      kaggle.api.authenticate()
      handle = "japondo/corn-farming-data"
      print("Los archivos a descargar son: ", kaggle.api.dataset_list_files(handle).files)
      kaggle.api.dataset_download_files(handle, path=".", unzip=True)

  - id: clean_split
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Clean the dataset and preparing for training stage
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - clean.py
    beforeCommands:
      - pip install pandas scikit-learn 
    inputFiles:
      corn.csv: "{{ outputs.download_dataset.outputFiles['corn_data.csv'] }}"
    commands:
      - python clean.py
    outputFiles:
      - "data_splits/*.csv"

  - id: train_linear_model
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Training the linear model 
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - train_linear.py
    env:
      # MLflow configuration - using your Cloud Run URL
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri }}"
      # Optional: Set experiment name
      MLFLOW_EXPERIMENT_NAME: "{{ vars.experiment_name }}"
      MODEL_NAME: "{{ vars.model_name}}"
    beforeCommands:
      - pip install pandas numpy scikit-learn mlflow==3.1.4 google-cloud-storage
    inputFiles:
      X_train.csv: "{{ outputs.clean_split.outputFiles['data_splits/X_train.csv'] }}"
      y_train.csv: "{{ outputs.clean_split.outputFiles['data_splits/y_train.csv'] }}"
      X_val.csv: "{{ outputs.clean_split.outputFiles['data_splits/X_val.csv'] }}"
      y_val.csv: "{{ outputs.clean_split.outputFiles['data_splits/y_val.csv'] }}"
    commands:
      - python train_linear.py
    outputFiles:
      - "model_artifacts/**"
      - "*.pkl"
      - "*.json"
  
  - id: model_registry_management
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Manage model versions and transitions in MLflow registry
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - model_registry.py
    env:
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri }}"
      MODEL_NAME: "{{ vars.model_name}}"
    beforeCommands:
      - pip install mlflow google-cloud-storage pandas
    inputFiles:
      run_info.json: "{{ outputs.train_linear_model.outputFiles['model_artifacts/run_info.json'] }}"
    commands:
      - python model_registry.py
    outputFiles:
      - "*.json"
  
  - id: fetch_production_model
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Fetch the latest production model from MLflow and evaluate performance
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - model_fetch.py
    beforeCommands:
      - pip install mlflow pandas numpy scikit-learn
    env:
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri}}"
      MODEL_NAME: "{{ vars.model_name}}"
      TARGET_STAGE: "{{ inputs.target_stage}}"
      THRESHOLD: "{{ inputs.model_performance_threshold }}"
      FORCE_DEPLOYMENT: "{{ inputs.force_deployment}}"
    commands:
      - python model_fetch.py
    outputFiles:
      - "model.pkl"
      - "model_metadata.json"
      - "deployment_decision.json"