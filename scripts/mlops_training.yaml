id: data_mlops_workflow
namespace: corn_mlops_flow

inputs:
  - id: model_performance_threshold
    type: FLOAT
    defaults: 0.7
  - id: target_stage
    type: STRING
    defaults: Production
  - id: force_deployment
    type: BOOLEAN
    defaults: false
  - id: model_selection
    type: SELECT
    displayName: "Select the model you are interested:"
    defaults: linear
    values:
      - linear
      - ridge
      - lasso

variables:
  mlflow_tracking_uri: "https://mlflow-server-453290981886.us-central1.run.app"
  gcp_project: "corn-yield-prediction-kenia"
  experiment_name: "corn-yield-prediction"
  model_name: "corn-yield-predictor"

tasks:
  - id: download_dataset
    type: io.kestra.plugin.scripts.python.Script
    description: Download corn farming dataset from Kaggle using authenticated API
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    env:
      KAGGLE_USERNAME: "{{ kv('KAGGLE_USERNAME') }}"
      KAGGLE_KEY: "{{ kv('KAGGLE_KEY') }}"
    beforeCommands:
    - pip install kagglehub
    - pip install kaggle 
    outputFiles:
      - "corn_data.csv"
    script: |
      import kaggle
      kaggle.api.authenticate()
      handle = "japondo/corn-farming-data"
      print("Los archivos a descargar son: ", kaggle.api.dataset_list_files(handle).files)
      kaggle.api.dataset_download_files(handle, path=".", unzip=True)

  - id: clean_split
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Clean the dataset and preparing for training stage
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - clean.py
    beforeCommands:
      - pip install pandas scikit-learn 
    inputFiles:
      corn.csv: "{{ outputs.download_dataset.outputFiles['corn_data.csv'] }}"
    commands:
      - python clean.py
    outputFiles:
      - "data_splits/*.csv"
      - "vectorizer.pkl"

  - id: train_linear_model
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Training the linear model 
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - train_linear.py
    env:
      # MLflow configuration - using your Cloud Run URL
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri }}"
      # Optional: Set experiment name
      MLFLOW_EXPERIMENT_NAME: "{{ vars.experiment_name }}"
      MODEL_NAME: "{{ vars.model_name}}"
      MODEL_TYPE: "{{ inputs.model_selection}}"
    beforeCommands:
      - pip install pandas numpy scikit-learn mlflow==3.1.4 google-cloud-storage
    inputFiles:
      X_train.csv: "{{ outputs.clean_split.outputFiles['data_splits/X_train.csv'] }}"
      y_train.csv: "{{ outputs.clean_split.outputFiles['data_splits/y_train.csv'] }}"
      X_val.csv: "{{ outputs.clean_split.outputFiles['data_splits/X_val.csv'] }}"
      y_val.csv: "{{ outputs.clean_split.outputFiles['data_splits/y_val.csv'] }}"
      dict_vectorizer: "{{ outputs.clean_split.outputFiles['vectorizer.pkl'] }}"
    commands:
      - python train_linear.py
    outputFiles:
      - "model_artifacts/**"
      - "*.pkl"
      - "*.json"
  
  - id: model_registry_management
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Manage model versions and transitions in MLflow registry
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - model_registry.py
    env:
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri }}"
      MODEL_NAME: "{{ vars.model_name}}"
    beforeCommands:
      - pip install mlflow google-cloud-storage pandas
    inputFiles:
      run_info.json: "{{ outputs.train_linear_model.outputFiles['model_artifacts/run_info.json'] }}"
    commands:
      - python model_registry.py
    outputFiles:
      - "*.json"
  
  - id: fetch_production_model
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: Fetch the latest production model from MLflow and evaluate performance
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - model_fetch.py
    inputFiles:
      dict_vectorizer: "{{ outputs.clean_split.outputFiles['vectorizer.pkl'] }}"
    beforeCommands:
      - pip install mlflow pandas numpy scikit-learn
    env:
      MLFLOW_TRACKING_URI: "{{ vars.mlflow_tracking_uri}}"
      MODEL_NAME: "{{ vars.model_name}}"
      TARGET_STAGE: "{{ inputs.target_stage}}"
      THRESHOLD: "{{ inputs.model_performance_threshold }}"
      FORCE_DEPLOYMENT: "{{ inputs.force_deployment}}"
    commands:
      - python model_fetch.py
    outputFiles:
      - "*.bin"
      - "model_metadata.json"
      - "deployment_decision.json"

  - id: deployment_decision_gate
    type: io.kestra.plugin.core.flow.If
    condition: "{{ read(outputs.fetch_production_model.outputFiles['deployment_decision.json']) | jq('.should_deploy') }}"
    then:
      - id: build_docker_image
        type: io.kestra.plugin.scripts.shell.Commands
        description: Build Docker image for the model service
        inputFiles:
          model.bin: "{{ outputs.fetch_production_model.outputFiles['corn-yield-predictor_model.bin'] }}"
          model_metadata.json: "{{ outputs.fetch_production_model.outputFiles['model_metadata.json'] }}"
        commands:
        - |
          # Create app directory
          mkdir -p app
          
          # Move model files to app directory
          mv model.bin app/
          mv model_metadata.json app/
          
          # Create requirements.txt
          cat > app/requirements.txt << EOF
          flask==2.3.3
          pandas==2.3.1
          numpy==2.2.6
          scikit-learn==1.7.1
          waitress==2.0.0
          google-cloud-logging==3.8.0
          EOF

          # Create main.py (Flask app)
          cat > app/main.py << 'EOF'
          import os
          import json
          import logging
          import pickle
          from flask import Flask, request, jsonify
          import pandas as pd
          import numpy as np

          # The model used is referred
          model_file = 'model.bin'

          # Setup logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # Load model and metadata at startup
          try:
              with open(model_file, 'rb') as f_in:
                  dv, model = pickle.load(f_in)
                  
              with open('model_metadata.json', 'r') as f:
                  metadata = json.load(f)
                  
              logger.info(f"Model loaded: {metadata['model_name']} v{metadata['model_version']}")
          except Exception as e:
              logger.error(f"Failed to load model: {e}")
              raise

          # Instantiating the app
          app = Flask('yield')

          @app.route('/predict', methods=['POST'])
          # Function that calculates the target variable:
          def predict():
              farmer = request.get_json()
              X = dv.transform([farmer])
              y_pred = model.predict(X)[0]
              result = {
                  'Yield prediction': y_pred,
              }
              return jsonify(result)

          if __name__ == "__main__":
              app.run(debug=True, host='0.0.0.0', port=9696)
          EOF

          # Create Dockerfile
          cat > Dockerfile << EOF
          FROM python:3.11-slim

          WORKDIR /app
          
          # Copy requirements and install dependencies
          COPY app/requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          # Copy application files
          COPY app/ .
          
          # Expose the application port
          EXPOSE 9696

          # Set the default command to run the application
          CMD ["waitress-serve", "--listen=0.0.0.0:9696", "main:app"]
          EOF
          
          # Archive the app folder
          tar -czf app.tar.gz app/

          echo "Docker files created successfully"
        
        outputFiles:
          - "Dockerfile"
          - "app/**"
          - "app.tar.gz"
        
      - id: build_and_push_to_gcr
        type: io.kestra.plugin.scripts.shell.Commands
        description: Build Docker image and push to GCR - Simple Version
        docker:
          image: google/cloud-sdk:alpine
        inputFiles:
          Dockerfile: "{{ outputs.build_docker_image.outputFiles['Dockerfile'] }}"
          app_archive: "{{ outputs.build_docker_image.outputFiles['app.tar.gz'] }}"
          model_metadata.json: "{{ outputs.fetch_production_model.outputFiles['model_metadata.json'] }}"
          service_account_key.json: "{{ kv('GCP_SERVICE_ACCOUNT_KEY') }}"
        env:
          PROJECT_ID: "{{ kv('GCP_PROJECT_ID') }}"
          REGION: "{{ kv('GCP_REGION') }}"
          SERVICE_NAME: "corn-predictor-service"
        commands:
          - |
              echo "Building and pushing to GCR - Simple Method..."
              
              # Autenticación
              gcloud auth activate-service-account --key-file=service_account_key.json
              gcloud config set project $PROJECT_ID
              
              # Verificar autenticación
              echo "Authenticated as: $(gcloud auth list --filter=status:ACTIVE --format="value(account)")"
              echo "Using project: $(gcloud config get-value project)"
              
              # Instalar jq y extraer archivos
              apk add --no-cache jq
              tar -xzf app_archive
              
              # Verificar archivos
              echo "Available files:"
              ls -la
              
              if [ ! -f "Dockerfile" ]; then
                  echo "ERROR: Dockerfile not found!"
                  exit 1
              fi
              
              echo "Dockerfile content preview:"
              head -5 Dockerfile
              
              # Variables
              MODEL_VERSION=$(cat model_metadata.json | jq -r '.model_version')
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              
              echo "Building with:"
              echo "  - Model Version: $MODEL_VERSION"
              echo "  - Timestamp: $TIMESTAMP"
              
              # Build principal (método más simple)
              echo "Building image..."
              gcloud builds submit . \
                --tag="gcr.io/$PROJECT_ID/$SERVICE_NAME:latest" \
                --project=$PROJECT_ID \
                --timeout=1200s \
                --verbosity=info
              
              # Verificar que el build fue exitoso
              if [ $? -ne 0 ]; then
                  echo "ERROR: Build failed!"
                  exit 1
              fi
              
              # Tags adicionales
              echo "Adding additional tags..."
              gcloud container images add-tag \
                "gcr.io/$PROJECT_ID/$SERVICE_NAME:latest" \
                "gcr.io/$PROJECT_ID/$SERVICE_NAME:v$MODEL_VERSION" \
                --project=$PROJECT_ID --quiet
                
              gcloud container images add-tag \
                "gcr.io/$PROJECT_ID/$SERVICE_NAME:latest" \
                "gcr.io/$PROJECT_ID/$SERVICE_NAME:$TIMESTAMP" \
                --project=$PROJECT_ID --quiet
              
              echo "Images pushed successfully!"
              
              # Verificar imágenes
              echo "Images in repository:"
              gcloud container images list --repository=gcr.io/$PROJECT_ID/$SERVICE_NAME --project=$PROJECT_ID || echo "Could not list images, but build completed"
              
              # Build info
              cat > build_info.json << EOF
              {
                "project_id": "$PROJECT_ID",
                "service_name": "$SERVICE_NAME",
                "model_version": "$MODEL_VERSION",
                "timestamp": "$TIMESTAMP",
                "images": {
                  "latest": "gcr.io/$PROJECT_ID/$SERVICE_NAME:latest",
                  "version": "gcr.io/$PROJECT_ID/$SERVICE_NAME:v$MODEL_VERSION",
                  "timestamp": "gcr.io/$PROJECT_ID/$SERVICE_NAME:$TIMESTAMP"
                }
              }
              EOF
              
              echo "Build completed successfully!"
        outputFiles:
          - "build_info.json"
      
    else:
    - id: skip_deployment
      type: io.kestra.plugin.core.log.Log
      message: "Deployment skipped - should_deploy is false"