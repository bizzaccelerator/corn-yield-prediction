id: mlflow-model-evaluation
namespace: corn_mlops_flow

description: Extract production model from MLflow and evaluate with Evidently for data drift

inputs:
  - id: model_name
    type: STRING
    required: true
    defaults: corn-yield-predictor
    description: "Name of the model in MLflow registry"
  - id: file_name
    type: STRING
    required: true
    defaults: 2024_01
    description: "Name of CSV file you want to use for testing (eg: 2024_01, 2024_02, etc.)"

variables:
  mlflow_url: "https://mlflow-server-453290981886.us-central1.run.app/"
  evidently_ui_url: "https://evidently-ui-453290981886.us-central1.run.app/"
  evidently_url: "https://evidently-monitoring-c4tqdte5jq-uc.a.run.app"
  bucket_name: "corn-yield-testing-datasets"
  base_path: "data_2024"
  file_extension: ".csv"

tasks:
  - id: extract_production_model
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: "Extract current production model from MLflow registry"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - extract_production_model.py
    env:
      MLFLOW_URL: "{{ vars.mlflow_url }}"
      MODEL_NAME: "{{ inputs.model_name }}"
    beforeCommands:
      - pip install mlflow==3.1.4 evidently==0.7.9 pandas scikit-learn
    commands:
      - python extract_production_model.py
    outputFiles:
    - "model_info.json"
    - "mydir/artifacts/model.pkl"
    - "mydir/artifacts/vectorizer.pkl"

  - id: load_and_prepare_base_data
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: "Extract data used for training the model in production"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - load_and_prepare_base_data.py
    env:
      KAGGLE_USERNAME: "{{ kv('KAGGLE_USERNAME') }}"
      KAGGLE_KEY: "{{ kv('KAGGLE_KEY') }}"
    beforeCommands:
    - pip install kagglehub kaggle mlflow==3.1.4 evidently==0.7.9 pandas scikit-learn numpy
    commands:
      - python load_and_prepare_base_data.py
    outputFiles:
    - "X_encoded.npy"
    - "y.npy"
    - "feature_names.npy"

  - id: prepare_base_report
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: "Create the report for evaluation at current month (base performance)"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - monitoring.py
    inputFiles:
      model_info.json: "{{ outputs.extract_production_model.outputFiles['model_info.json'] }}"
      model.pkl: "{{ outputs.extract_production_model.outputFiles['mydir/artifacts/model.pkl'] }}"
      vectorizer.pkl: "{{ outputs.extract_production_model.outputFiles['mydir/artifacts/vectorizer.pkl'] }}"
      X_encoded.npy: "{{ outputs.load_and_prepare_base_data.outputFiles['X_encoded.npy'] }}"
      y.npy: "{{ outputs.load_and_prepare_base_data.outputFiles['y.npy'] }}"
      feature_names.npy: "{{ outputs.load_and_prepare_base_data.outputFiles['feature_names.npy'] }}"
    beforeCommands:
      - pip install mlflow pandas==2.3.1 numpy==2.2.6 scikit-learn==1.7.1 mlflow==3.1.4 joblib==1.4.2
      - pip install evidently==0.7.9 requests
    commands:
      - python monitoring.py
    outputFiles:
    - project_metadata.json
    - "workspace/**"
    - "workspace.zip"

  - id: download_test_data_from_gcs
    type: io.kestra.plugin.gcp.gcs.Download
    from: "gs://{{ vars.bucket_name }}/{{ vars.base_path }}/corn_{{ inputs.file_name }}{{ vars.file_extension }}"
    serviceAccount: "{{ kv('GCP_SERVICE_ACCOUNT_KEY') }}"
    projectId: "{{ kv('GCP_PROJECT_ID') }}"

  - id: load_and_prepare_test_data
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: "Load new dataset and prepare for evaluation using TRAINING vectorizer"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - load_and_prepare_test_data.py
    beforeCommands:
      - pip install mlflow==3.1.4 evidently==0.7.9 pandas scikit-learn joblib
    inputFiles:
      vectorizer.pkl: "{{ outputs.extract_production_model.outputFiles['mydir/artifacts/vectorizer.pkl'] }}"
      feature_names.npy: "{{ outputs.load_and_prepare_base_data.outputFiles['feature_names.npy'] }}"
      corn_add.csv: "{{ outputs.download_test_data_from_gcs.uri}}"
    commands:
      - python load_and_prepare_test_data.py
    outputFiles:
      - "target_val.npy"
      - "X_encoded_val.npy"

  - id: analyze_data_drift
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: "Analyze data drift between training and new datasets"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - drift_monitoring.py
    inputFiles:
      model_info.json: "{{ outputs.extract_production_model.outputFiles['model_info.json'] }}"
      model.pkl: "{{ outputs.extract_production_model.outputFiles['mydir/artifacts/model.pkl'] }}"
      vectorizer.pkl: "{{ outputs.extract_production_model.outputFiles['mydir/artifacts/vectorizer.pkl'] }}"
      X_encoded.npy: "{{ outputs.load_and_prepare_base_data.outputFiles['X_encoded.npy'] }}"
      y.npy: "{{ outputs.load_and_prepare_base_data.outputFiles['y.npy'] }}"
      feature_names.npy: "{{ outputs.load_and_prepare_base_data.outputFiles['feature_names.npy'] }}"
      target_val.npy: "{{ outputs.load_and_prepare_test_data.outputFiles['target_val.npy'] }}"
      X_encoded_val.npy: "{{ outputs.load_and_prepare_test_data.outputFiles['X_encoded_val.npy'] }}"
    beforeCommands:
      - pip install mlflow pandas==2.3.1 numpy==2.2.6 scikit-learn==1.7.1 mlflow==3.1.4 joblib==1.4.2
      - pip install evidently==0.7.9 requests
    commands:
      - python drift_monitoring.py
    outputFiles:
      - drift_metadata.json
      - "drift_workspace/**"

  - id: compare_model_performance
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    description: "Compare current model performance metrics (RMSE, R2) with baseline values and send email alerts when drift or degradation is detected"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    namespaceFiles:
      enabled: true
      include:
        - model_performance_comparison.py
    inputFiles:
      drift_metadata.json: "{{ outputs.analyze_data_drift.outputFiles['drift_metadata.json'] }}"
    env:
      SMTP_SERVER: "{{ kv('SMTP_SERVER') }}"
      SMTP_PORT: "{{ kv('SMTP_PORT') }}"
      SENDER_EMAIL: "{{ kv('SENDER_EMAIL') }}"
      SENDER_PASSWORD: "{{ kv('SENDER_PASSWORD') }}"
      RECIPIENT_EMAILS: "{{ kv('RECIPIENT_EMAILS') }}"
      RMSE_DEGRADATION_THRESHOLD: "0.05"
      R2_DEGRADATION_THRESHOLD: "0.05"
      MAE_DEGRADATION_THRESHOLD: "0.05"
    beforeCommands:
      - pip install pandas==2.3.1 numpy==2.2.6 scikit-learn==1.7.1
      - pip install evidently==0.7.9 requests
    commands:
      - python model_performance_comparison.py
    outputFiles:
      - performance_comparison.json
    retry:
      type: constant
      interval: PT30S
      maxAttempt: 3

  - id: handle_critical_alerts
    type: io.kestra.plugin.core.flow.If
    condition: "{{ read(outputs.compare_model_performance.outputFiles['performance_comparison.json']) | jq('.alerts.alert_count > 0') }}"
    then:
      - id: log_critical_alert
        type: io.kestra.plugin.core.log.Log
        message: "CRITICAL: Model performance alerts detected! Email notifications sent. Check dashboard immediately."
        level: ERROR

  - id: success_notification
    type: io.kestra.plugin.core.flow.If
    condition: "{{ read(outputs.compare_model_performance.outputFiles['performance_comparison.json']) | jq('.alerts.alert_count == 0') }}"
    then:
      - id: log_success
        type: io.kestra.plugin.core.log.Log
        message: "Model performance monitoring completed successfully. No alerts triggered."
        level: INFO
